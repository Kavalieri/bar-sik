extends Node
class_name EventBridge
## Puente de eventos entre managers y UI - Versi칩n Simplificada
## Desacopla la comunicaci칩n entre componentes usando se침ales

# Se침ales para comunicaci칩n desacoplada
signal ui_update_requested(component: String, data: Dictionary)
signal manager_action_requested(action: String, params: Dictionary)
signal save_game_requested
signal pause_menu_requested
signal prestige_panel_requested

# Referencias m칤nimas necesarias
var game_controller: Node
var ui_coordinator: UICoordinator

func _ready():
	print("游깰 EventBridge inicializado - Versi칩n Simplificada")

func initialize(controller: Node, ui_coord: UICoordinator):
	"""Inicializar referencias principales"""
	game_controller = controller
	ui_coordinator = ui_coord
	_connect_all_signals()
	print("游댕 EventBridge inicializado con GameController")

func _connect_all_signals():
	"""Conectar se침ales b치sicas"""
	# Las se침ales espec칤ficas se conectar치n desde el GameController
	print("游니 EventBridge listo para recibir se침ales")

func _update_all_displays():
	"""Solicitar actualizaci칩n de displays via se침al"""
	ui_update_requested.emit("all", {})

# === MANEJADORES DE EVENTOS SIMPLIFICADOS ===
# Estos m칠todos emiten se침ales en lugar de ejecutar l칩gica directamente

func _on_generator_purchased(generator_id: String, quantity: int) -> void:
	"""Manejar compra de generador via se침al"""
	print("游니 EventBridge: Generador comprado - %dx %s" % [quantity, generator_id])
	manager_action_requested.emit("generator_purchased", {
		"generator_id": generator_id,
		"quantity": quantity
	})
	ui_update_requested.emit("generation", {})

func _on_resource_generated(resource_type: String, amount: int) -> void:
	"""Manejar generaci칩n de recursos via se침al"""
	print("游니 EventBridge: Recurso generado - %dx %s" % [amount, resource_type])
	manager_action_requested.emit("resource_generated", {
		"resource_type": resource_type,
		"amount": amount
	})
	ui_update_requested.emit("money", {})

func _on_station_purchased(station_id: String) -> void:
	"""Manejar compra de estaci칩n via se침al"""
	print("游니 EventBridge: Estaci칩n comprada - %s" % station_id)
	manager_action_requested.emit("station_purchased", {
		"station_id": station_id
	})
	ui_update_requested.emit("production", {})

func _on_product_produced(product_type: String, amount: int) -> void:
	"""Manejar producci칩n via se침al"""
	print("游니 EventBridge: Producto producido - %dx %s" % [amount, product_type])
	manager_action_requested.emit("product_produced", {
		"product_type": product_type,
		"amount": amount
	})
	ui_update_requested.emit("production", {})

func _on_item_sold(item_type: String, item_name: String, quantity: int, price: float, total_earnings: float) -> void:
	"""Manejar venta via se침al"""
	print("游니 EventBridge: Item vendido - %dx %s por $%s" % [quantity, item_name, total_earnings])
	manager_action_requested.emit("item_sold", {
		"item_type": item_type,
		"item_name": item_name,
		"quantity": quantity,
		"price": price,
		"total_earnings": total_earnings
	})
	ui_update_requested.emit("sales", {})

func _on_customer_served(customer_name: String, satisfaction: float, tip: float) -> void:
	"""Manejar cliente servido via se침al"""
	print("游니 EventBridge: Cliente servido - %s (satisfacci칩n: %s)" % [customer_name, satisfaction])
	manager_action_requested.emit("customer_served", {
		"customer_name": customer_name,
		"satisfaction": satisfaction,
		"tip": tip
	})
	ui_update_requested.emit("customers", {})

func _on_pause_pressed() -> void:
	"""Solicitar mostrar men칰 de pausa"""
	print("游니 EventBridge: Pausa solicitada")
	pause_menu_requested.emit()

func _on_prestige_button_pressed() -> void:
	"""Solicitar mostrar panel de prestigio"""
	print("游니 EventBridge: Panel de prestigio solicitado")
	prestige_panel_requested.emit()

func _on_ui_generator_purchase_requested(generator_id: String, quantity: int) -> void:
	"""Procesar solicitud de compra de generador desde UI"""
	print("游니 EventBridge: Compra de generador solicitada - %dx %s" % [quantity, generator_id])
	manager_action_requested.emit("ui_generator_purchase", {
		"generator_id": generator_id,
		"quantity": quantity
	})

func _on_ui_station_purchase_requested(station_id: String, multiplier: int = 1) -> void:
	"""Procesar solicitud de compra de estaci칩n desde UI"""
	print("游니 EventBridge: Compra de estaci칩n solicitada - %s (x%d)" % [station_id, multiplier])
	manager_action_requested.emit("ui_station_purchase", {
		"station_id": station_id,
		"multiplier": multiplier
	})

func _on_ui_manual_production_requested(station_index: int, quantity: int) -> void:
	"""Procesar solicitud de producci칩n manual desde UI"""
	print("游니 EventBridge: Producci칩n manual solicitada - Estaci칩n %d, cantidad %d" % [station_index, quantity])
	manager_action_requested.emit("ui_manual_production", {
		"station_index": station_index,
		"quantity": quantity
	})

func _on_ui_item_sell_requested(item_type: String, item_name: String, quantity: int) -> void:
	"""Procesar solicitud de venta desde UI"""
	print("游니 EventBridge: Venta solicitada - %dx %s" % [quantity, item_name])
	manager_action_requested.emit("ui_item_sell", {
		"item_type": item_type,
		"item_name": item_name,
		"quantity": quantity
	})

# === FUNCIONES DE UTILIDAD ===

func request_save():
	"""Solicitar guardado del juego"""
	save_game_requested.emit()

func request_ui_update(component: String, data: Dictionary = {}):
	"""Solicitar actualizaci칩n espec칤fica de UI"""
	ui_update_requested.emit(component, data)

func request_manager_action(action: String, params: Dictionary = {}):
	"""Solicitar acci칩n espec칤fica de manager"""
	manager_action_requested.emit(action, params)
